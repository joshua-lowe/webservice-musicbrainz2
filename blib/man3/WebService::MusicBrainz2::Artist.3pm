.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::MusicBrainz2::Artist 3"
.TH WebService::MusicBrainz2::Artist 3 "2013-02-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::MusicBrainz2::Artist
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&        use WebService::MusicBrainz2::Artist;
\&        my $ws = WebService::MusicBrainz2::Artist\->new;
\&        my $response = $ws\->search({ ARTIST => \*(AqDJ Krush\*(Aq });
\&        my $artist = $response\->artist; # get first in list
\&        print $artist\->name . " a  " . $artist\->gender .  " born " . $artist\->life_span\->begin . "\en";
\&        # OUTPUT: DJ Krush a Male born 1962\-07\-29
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to query an artist from the MusicBrainz version 2 web service.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This method is the constructor and it will make a call for initialization.  This
method takes any of four (4) optional parameters to specify enable various connections settings.
.IP "\s-1HOST\s0" 4
.IX Item "HOST"
.PP
The specific mirror server to connect to.  Defaults to \*(L"musicbrainz.org\*(R"
.IP "\s-1USER\s0" 4
.IX Item "USER"
.PP
The username used for athentication against the server.  This allows user-tags and user-rating to be retrived from the web service.  
Requires the \s-1PASS\s0 paramiter as well.  Defaults to undef (no authentication).
.IP "\s-1PASS\s0" 4
.IX Item "PASS"
.PP
The password used for athentication against the server.
.IP "\s-1RELM\s0" 4
.IX Item "RELM"
.PP
The http authentication relm used for athentication against the server.  Only required if the mirror uses a different relm in its \s-1HTTP\s0 \s-1AUTH\s0 setup.  Defaults to \s-1HOST\s0.
.PP
my \f(CW$ws\fR = WebService::MusicBrainz2::Artist\->new({\s-1HOST\s0 => 'de.musicbrainz.org', \s-1USER\s0 => 'username', \s-1PASS\s0 => 'secret');
.SS "query"
.IX Subsection "query"
This method returns the cached WebService::MusicBrainz2::Query object.
.SS "search"
.IX Subsection "search"
This method will perform the search of the MusicBrainz2 database through their web service schema and return a
response object.
.PP
.Vb 1
\&    my $ws = WebService::MusicBrainz2::Artist\->new();
\&    
\&    my $response = $ws\->search({ MBID => \*(Aqd15721d8\-56b4\-453d\-b506\-fc915b14cba2\*(Aq });
\&    my $response = $ws\->search({ NAME => \*(Aqthrowing muses\*(Aq });
\&    my $response = $ws\->search({ NAME => \*(Aqjames\*(Aq, LIMIT => 5 });
\&    my $response = $ws\->search({ NAME => \*(Aqbeatles\*(Aq, OFFSET => 5 });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqaliases\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqartist\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqrelease\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqtrack\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqurl\-rels\*(Aq });
.Ve
.PP
Multiple \s-1INC\s0 params can be delimited by whitespace, commas, or + characters.
.PP
.Vb 3
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqaliases url\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqaliases,url\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq, INC => \*(Aqaliases+url\-rels\*(Aq });
.Ve
.PP
\fIFind a single artist by \s-1MBID\s0\fR
.IX Subsection "Find a single artist by MBID"
.PP
my \f(CW$mbid_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '4eca1aa0\-c79f\-481b\-af8a\-4a2d6c41aa5c' });
.PP
\fIFind a artist(s) by name\fR
.IX Subsection "Find a artist(s) by name"
.PP
my \f(CW$name_response\fR = \f(CW$ws\fR\->search({ \s-1NAME\s0 => 'Pantera' });
.PP
\fIFind a artist(s) by name and limit results\fR
.IX Subsection "Find a artist(s) by name and limit results"
.PP
my \f(CW$name_limit_response\fR = \f(CW$ws\fR\->search({ \s-1NAME\s0 => 'Elvis', \s-1LIMIT\s0 => 3 });
.PP
\fIFind a artist(s) by name and offset\fR
.IX Subsection "Find a artist(s) by name and offset"
.PP
my \f(CW$name_offset_response\fR = \f(CW$ws\fR\->search({ \s-1NAME\s0 => 'Elvis', \s-1OFFSET\s0 => 10 });
.PP
\fIFind a artist by \s-1MBID\s0 and include aliases\fR
.IX Subsection "Find a artist by MBID and include aliases"
.PP
my \f(CW$mbid_aliases_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '070d193a\-845c\-479f\-980e\-bef15710653e', \s-1INC\s0 => 'aliases' });
.PP
\fIFind a artist by \s-1MBID\s0 and include release groups\fR
.IX Subsection "Find a artist by MBID and include release groups"
.PP
my \f(CW$mbid_release_groups_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '4dca4bb2\-23ba\-4103\-97e6\-5810311db33a', \s-1INC\s0 => 'release\-groups sa\-Album' });
.PP
\fIFind a artist by \s-1MBID\s0 and include artist relations\fR
.IX Subsection "Find a artist by MBID and include artist relations"
.PP
my \f(CW$mbid_artist_rels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ae1b47d5\-5128\-431c\-9d30\-e08fd90e0767', \s-1INC\s0 => 'artist\-rels' });
.PP
\fIFind a artist by \s-1MBID\s0 and include label relations\fR
.IX Subsection "Find a artist by MBID and include label relations"
.PP
my \f(CW$mbid_label_rels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'label\-rels+sa\-Official' });
.PP
\fIFind a artist by \s-1MBID\s0 and include release relations\fR
.IX Subsection "Find a artist by MBID and include release relations"
.PP
my \f(CW$mbid_release_rels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'release\-rels' });
.PP
\fIFind a artist by \s-1MBID\s0 and include track relations\fR
.IX Subsection "Find a artist by MBID and include track relations"
.PP
my \f(CW$mbid_track_rels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'track\-rels' });
.PP
\fIFind a artist by \s-1MBID\s0 and include \s-1URL\s0 relations\fR
.IX Subsection "Find a artist by MBID and include URL relations"
.PP
my \f(CW$mbid_url_rels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ae1b47d5\-5128\-431c\-9d30\-e08fd90e0767', \s-1INC\s0 => 'url\-rels' });
.PP
\fIFind a artist by \s-1MBID\s0 and include tags\fR
.IX Subsection "Find a artist by MBID and include tags"
.PP
my \f(CW$mbid_tags_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'tags' });
.PP
\fIFind a artist by \s-1MBID\s0 and include ratings\fR
.IX Subsection "Find a artist by MBID and include ratings"
.PP
my \f(CW$mbid_ratings_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'ratings' });
.PP
\fIFind a artist by \s-1MBID\s0 and include counts\fR
.IX Subsection "Find a artist by MBID and include counts"
.PP
my \f(CW$mbid_counts_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'counts+sa\-Official' });
.PP
\fIFind a artist by \s-1MBID\s0 and include release events\fR
.IX Subsection "Find a artist by MBID and include release events"
.PP
my \f(CW$mbid_rel_events_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'release\-events+sa\-Official' });
.PP
\fIFind a artist by \s-1MBID\s0 and include discs\fR
.IX Subsection "Find a artist by MBID and include discs"
.PP
my \f(CW$mbid_discs_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'discs+sa\-Official' });
.PP
\fIFind a artist by \s-1MBID\s0 and include labels\fR
.IX Subsection "Find a artist by MBID and include labels"
.PP
my \f(CW$mbid_labels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => '65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab', \s-1INC\s0 => 'labels+release\-events+sa\-Official' });
.PP
\fIFind a artist by direct Lucene query\fR
.IX Subsection "Find a artist by direct Lucene query"
.PP
my \f(CW$q1_response\fR = \f(CW$ws\fR\->search({ \s-1QUERY\s0 => 'begin:1990 \s-1AND\s0 type:group'});
.SS "lookup"
.IX Subsection "lookup"
.SS "browse"
.IX Subsection "browse"
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Joshua Lowe <joshua.lowe.dev@gmail.com>" 4
.IX Item "Joshua Lowe <joshua.lowe.dev@gmail.com>"
.PD 0
.IP "Bob Faist <bob.faist@gmail.com>" 4
.IX Item "Bob Faist <bob.faist@gmail.com>"
.PD
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2013 by Joshua Lowe
Copyright 2006\-2009 by Bob Faist
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://wiki.musicbrainz.org/XMLWebService
