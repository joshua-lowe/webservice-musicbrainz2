.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::MusicBrainz2::Release 3"
.TH WebService::MusicBrainz2::Release 3 "2013-01-13" "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::MusicBrainz2::Release
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use WebService::MusicBrainz2::Release;
\&    
\&        my $ws = WebService::MusicBrainz2::Release\->new;
\&    
\&        my $response = $ws\->search({ TITLE => \*(Aqok computer\*(Aq });
\&
\&        my $release = $response\->release; # grab first one in the list
\&
\&        print $release\->title, " (", $release\->type, ") \- ", $release\->artist\->name, "\en";
\&
\&        # OUTPUT: OK Computer (Album Official) \- Radiohead
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This method is the constructor and it will call for  initialization.
.SS "query"
.IX Subsection "query"
This method will return the cached query object;
.SS "search"
.IX Subsection "search"
This method is used to search the MusicBrainz2 database using their web service schema.  The only argument is a hashref
to define the search parameters.
.PP
.Vb 1
\&    my $ws = WebService::MusicBrainz2::Release\->new;
\&    
\&    my $response = $ws\->search({ TITLE => \*(AqHighway to Hell\*(Aq });
\&    my $response = $ws\->search({ ARTIST => \*(Aqsleater kinney\*(Aq });
\&    my $response = $ws\->search({ ARTIST => \*(Aqbeatles\*(Aq, OFFSET => 4 });
\&    my $response = $ws\->search({ ARTISTID => \*(Aq65f4f0c5\-ef9e\-490c\-aee3\-909e7ae6b2ab\*(Aq });
\&    my $response = $ws\->search({ DISCID => \*(AqXgrrQ8Npf9Uz_trPIFMrSz6Mk6Q\-\*(Aq });
\&    my $response = $ws\->search({ RELEASETYPES => \*(AqOfficial\*(Aq, MBID => \*(Aqa89e1d92\-5381\-4dab\-ba51\-733137d0e431\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqartist\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqcounts\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqrelease\-events\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqdiscs\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqtracks\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqartist\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqrelease\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqtrack\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqurl\-rels\*(Aq });
.Ve
.PP
Multiple \s-1INC\s0 params can be delimited by whitespace, commas, or + characters.
.PP
.Vb 3
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqartist url\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqartist,url\-rels\*(Aq });
\&    my $response = $ws\->search({ MBID => \*(Aqfed37cfc\-2a6d\-4569\-9ac0\-501a7c7598eb\*(Aq, INC => \*(Aqartist+url\-rels\*(Aq });
.Ve
.PP
\fIFind a release by title\fR
.IX Subsection "Find a release by title"
.PP
my \f(CW$rel_title\fR = \f(CW$ws\fR\->search({ \s-1TITLE\s0 => 'Van Halen' });
.PP
\fIFind a release by disc id\fR
.IX Subsection "Find a release by disc id"
.PP
my \f(CW$rel_discid\fR = \f(CW$ws\fR\->search({ \s-1DISCID\s0 => 'Qb6ACLJhzNM46cXKVZSh3qMOv6A\-' });
.PP
\fIFind a release by artist name\fR
.IX Subsection "Find a release by artist name"
.PP
my \f(CW$rel_artist_response\fR = \f(CW$ws\fR\->search({ \s-1ARTIST\s0 => 'Van Halen' });
.PP
\fIFind a release by artist \s-1MBID\s0\fR
.IX Subsection "Find a release by artist MBID"
.PP
my \f(CW$rel_artistid_response\fR = \f(CW$ws\fR\->search({ \s-1ARTISTID\s0 => 'b665b768\-0d83\-4363\-950c\-31ed39317c15' });
.PP
\fIFind a release by artist name and release type\fR
.IX Subsection "Find a release by artist name and release type"
.PP
my \f(CW$rel_reltypes_response\fR = \f(CW$ws\fR\->search({ \s-1ARTIST\s0 => 'Van Halen', \s-1RELEASETYPES\s0 => 'Bootleg' });
.PP
\fIFind a release by artist name and count\fR
.IX Subsection "Find a release by artist name and count"
.PP
my \f(CW$rel_count_response\fR = \f(CW$ws\fR\->search({ \s-1ARTIST\s0 => 'Van Halen', \s-1COUNT\s0 => 10 });
.PP
\fIFind a release by artist name and release date\fR
.IX Subsection "Find a release by artist name and release date"
.PP
my \f(CW$rel_date_response\fR = \f(CW$ws\fR\->search({ \s-1ARTIST\s0 => 'Van Halen', \s-1DATE\s0 => '1980' });
.PP
\fIFind a release by artist name and limit\fR
.IX Subsection "Find a release by artist name and limit"
.PP
my \f(CW$rel_limit_response\fR = \f(CW$ws\fR\->search({ \s-1ARTIST\s0 => 'Van Halen', \s-1LIMIT\s0 => \*(L"40\*(R" });
.PP
\fIFind a release by \s-1MBID\s0 and include counts\fR
.IX Subsection "Find a release by MBID and include counts"
.PP
my \f(CW$rel_mbid_counts_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'counts' });
.PP
\fIFind a release by \s-1MBID\s0 and include release events\fR
.IX Subsection "Find a release by MBID and include release events"
.PP
my \f(CW$rel_mbid_events_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'release\-events' });
.PP
\fIFind a release by \s-1MBID\s0 and include discs\fR
.IX Subsection "Find a release by MBID and include discs"
.PP
my \f(CW$rel_mbid_discs_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'discs' });
.PP
\fIFind a release by \s-1MBID\s0 and include tracks\fR
.IX Subsection "Find a release by MBID and include tracks"
.PP
my \f(CW$rel_mbid_tracks_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'tracks' });
.PP
\fIFind a release by \s-1MBID\s0 and include release groups\fR
.IX Subsection "Find a release by MBID and include release groups"
.PP
my \f(CW$rel_mbid_relgroups_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'release\-groups' });
.PP
\fIFind a release by \s-1MBID\s0 and include artist relations\fR
.IX Subsection "Find a release by MBID and include artist relations"
.PP
my \f(CW$rel_mbid_artistrels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'artist\-rels' });
.PP
\fIFind a release by \s-1MBID\s0 and include \s-1URL\s0 relations\fR
.IX Subsection "Find a release by MBID and include URL relations"
.PP
my \f(CW$rel_mbid_urlrels_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'url\-rels' });
.PP
\fIFind a release by \s-1MBID\s0 and include tags\fR
.IX Subsection "Find a release by MBID and include tags"
.PP
my \f(CW$rel_mbid_tags_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'tags' });
.PP
\fIFind a release by \s-1MBID\s0 and include ratings\fR
.IX Subsection "Find a release by MBID and include ratings"
.PP
my \f(CW$rel_mbid_ratings_response\fR = \f(CW$ws\fR\->search({ \s-1MBID\s0 => 'ff565cd7\-acf8\-4dc0\-9603\-72d1b7ae284b', \s-1INC\s0 => 'ratings' });
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Joshua Lowe <joshua.lowe.dev@gmail.com> =item Bob Faist <bob.faist@gmail.com>" 4
.IX Item "Joshua Lowe <joshua.lowe.dev@gmail.com> =item Bob Faist <bob.faist@gmail.com>"
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2013 by Joshua Lowe
Copyright 2006\-2007 by Bob Faist
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://wiki.musicbrainz.org/XMLWebService
